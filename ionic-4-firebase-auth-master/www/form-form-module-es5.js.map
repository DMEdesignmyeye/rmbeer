{"version":3,"sources":["webpack:///src/app/form/form.module.ts","webpack:///src/app/form/form.page.ts","webpack:///src/app/form/form.page.html","webpack:///src/app/validators/password.validator.ts","webpack:///src/app/validators/username.validator.ts"],"names":["routes","path","component","FormPageModule","forChild","imports","declarations","email","FormPage","formBuilder","router","emailComposer","to","cc","attachments","subject","body","isHtml","validation_messages","type","message","isAvailable","then","available","genders","matching_passwords_group","password","compose","minLength","required","pattern","confirm_password","formGroup","areEqual","validations_form","group","username","validUsername","maxLength","name","lastname","gender","country_phone","country_phone_group","matching_passwords","terms","send","navigate","onSubmit","selector","templateUrl","styleUrls","PasswordValidator","val","valid","key","controls","hasOwnProperty","control","undefined","value","UsernameValidator","fc","toLowerCase"],"mappings":"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","file":"form-form-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\nimport { IonicModule } from '@ionic/angular';\nimport { FormPage } from './form.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: FormPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [FormPage]\n})\nexport class FormPageModule {}","  \nimport { Component, OnInit } from '@angular/core';\nimport { Validators, FormBuilder, FormGroup, FormControl } from '@angular/forms';\nimport { UsernameValidator } from '../validators/username.validator';\n import { PasswordValidator } from '../validators/password.validator';\n import { Router } from '@angular/router';\nimport { EmailComposer } from '@ionic-native/email-composer/ngx';\nlet email:any;\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.page.html',\n  styleUrls: ['./form.page.scss'],\n})\nexport class FormPage implements OnInit {\n  validations_form: FormGroup;\n  matching_passwords_group: FormGroup;\n  country_phone_group: FormGroup;\n \n  genders: Array<string>;\n\n  constructor(\n    public formBuilder: FormBuilder,\n    private router: Router,\n    private emailComposer: EmailComposer\n  ) { }\nsend(){\n  this.emailComposer.isAvailable().then((available: boolean) =>{\n    if(available) {\n      //Now we know we can send\n    }\n   });\n   \n  }\n   email = {\n     to: 'depetrinicolas@gmail.com',\n     cc: 'depetrinicolas@gmail.com', \n     attachments: [\n       'file://img/logo.png',\n       'res://icon.png',\n       'base64:icon.png//iVBORw0KGgoAAAANSUhEUg...',\n       'file://README.pdf'\n     ],\n     subject: 'Ieeee',\n     body: 'How are you? Nice greetings from Leipzig',\n     isHtml: true\n   }\n  ngOnInit() {\n    //  We just use a few random countries, however, you can use the countries you need by just adding them to this list.\n    // also you can use a library to get all the countries from the world.\n   \n\n    this.genders = [\n      \"Male\",\n      \"Female\"\n    ];\n\n    this.matching_passwords_group = new FormGroup({\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(5),\n        Validators.required,\n        Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')\n      ])),\n      confirm_password: new FormControl('', Validators.required)\n    }, (formGroup: FormGroup) => {\n      return PasswordValidator.areEqual(formGroup);\n    });\n\n\n    this.validations_form = this.formBuilder.group({\n      username: new FormControl('', Validators.compose([\n        UsernameValidator.validUsername,\n        Validators.maxLength(25),\n        Validators.minLength(5),\n        Validators.pattern('^(?=.*[a-zA-Z])(?=.*[0-9])[a-zA-Z0-9]+$'),\n        Validators.required\n      ])),\n      name: new FormControl('', Validators.required),\n      lastname: new FormControl('', Validators.required),\n      email: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n      gender: new FormControl(this.genders[0], Validators.required),\n      country_phone: this.country_phone_group,\n      matching_passwords: this.matching_passwords_group,\n      terms: new FormControl(true, Validators.pattern('true'))\n    });\n  }\n\n  validation_messages = {\n    'username': [\n      { type: 'required', message: 'Username is required.' },\n      { type: 'minlength', message: 'Username must be at least 5 characters long.' },\n      { type: 'maxlength', message: 'Username cannot be more than 25 characters long.' },\n      { type: 'pattern', message: 'Your username must contain only numbers and letters.' },\n      { type: 'validUsername', message: 'Your username has already been taken.' }\n    ],\n    'name': [\n      { type: 'required', message: 'Name is required.' }\n    ],\n    'lastname': [\n      { type: 'required', message: 'Last name is required.' }\n    ],\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Please wnter a valid email.' }\n    ],\n    'phone': [\n      { type: 'required', message: 'Phone is required.' },\n      { type: 'validCountryPhone', message: 'The phone is incorrect for the selected country.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 5 characters long.' },\n      { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, and one number.' }\n    ],\n    'confirm_password': [\n      { type: 'required', message: 'Confirm password is required.' }\n    ],\n    'matching_passwords': [\n      { type: 'areEqual', message: 'Password mismatch.' }\n    ],\n    'terms': [\n      { type: 'pattern', message: 'You must accept terms and conditions.' }\n    ],\n  };\n\n  onSubmit(){\n    this.send();\n    this.router.navigate([\"/agenda\"]);\n  }\n\n}","<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-title>Rock Me Beer Pedidos</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content padding class=\"form-content\">\n  <form [formGroup]=\"validations_form\"  (ngSubmit)=\"onSubmit()\">\n    <ion-item>\n      <ion-label position=\"floating\" color=\"primary\">Nombre y Apellido</ion-label>\n      <ion-input type=\"text\" formControlName=\"username\"></ion-input>\n    </ion-item>\n    <div class=\"validation-errors\">\n      <ng-container *ngFor=\"let validation of validation_messages.username\">\n        <div class=\"error-message\" *ngIf=\"validations_form.get('username').hasError(validation.type) && (validations_form.get('username').dirty || validations_form.get('username').touched)\">\n          <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\n        </div>\n      </ng-container>\n    </div>\n  \n    <ion-item>\n      <ion-label position=\"floating\" color=\"primary\">Email</ion-label>\n      <ion-input type=\"text\" formControlName=\"email\"></ion-input>\n    </ion-item>\n    <div class=\"validation-errors\">\n      <ng-container *ngFor=\"let validation of validation_messages.email\">\n        <div class=\"error-message\" *ngIf=\"validations_form.get('email').hasError(validation.type) && (validations_form.get('email').dirty || validations_form.get('email').touched)\">\n          <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\n        </div>\n      </ng-container>\n    </div>  \n    <ion-item>\n      <ion-label color=\"primary\">I Acepto las condiciones y tèrminos </ion-label>\n      <ion-checkbox color=\"primary\" formControlName=\"terms\"></ion-checkbox>\n    </ion-item>\n    <div class=\"validation-errors\">\n      <ng-container *ngFor=\"let validation of validation_messages.terms\">\n        <div class=\"error-message\" *ngIf=\"validations_form.get('terms').hasError(validation.type) && (validations_form.get('terms').dirty || validations_form.get('terms').touched)\">\n          <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\n        </div>\n      </ng-container>\n    </div>\n\n    <ion-button color=\"success\" class=\"submit-btn\" expand=\"full\" type=\"submit\" [disabled]=\"!validations_form.valid\">Enviar Pedido</ion-button>\n  </form>\n</ion-content>","import { FormControl, FormGroup } from '@angular/forms';\r\n\r\nexport class PasswordValidator {\r\n\r\n  // Inspired on: http://plnkr.co/edit/Zcbg2T3tOxYmhxs7vaAm?p=preview\r\n  static areEqual(formGroup: FormGroup) {\r\n    let val;\r\n    let valid = true;\r\n\r\n    for (let key in formGroup.controls) {\r\n      if (formGroup.controls.hasOwnProperty(key)) {\r\n        let control: FormControl = <FormControl>formGroup.controls[key];\r\n\r\n        if (val === undefined) {\r\n          val = control.value\r\n        } else {\r\n          if (val !== control.value) {\r\n            valid = false;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (valid) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      areEqual: true\r\n    };\r\n  }\r\n}","import { FormControl } from '@angular/forms';\r\n\r\nexport class UsernameValidator {\r\n\r\n  static validUsername(fc: FormControl){\r\n\r\n    if(fc.value.toLowerCase() === \"abc123\" || fc.value.toLowerCase() === \"123abc\"){\r\n      return {\r\n        validUsername: true\r\n      };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n} "]}