{"version":3,"sources":["./src/app/form/form.module.ts","./src/app/form/form.page.ts","./src/app/form/form.page.html","./src/app/validators/password.validator.ts","./src/app/validators/username.validator.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACM;AACmB;AACX;AACV;AACN;;;AAEvC,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,mDAAQ;KACpB;CACF,CAAC;AAYK,MAAM,cAAc;;6FAAd,cAAc;sJAAd,cAAc,kBAThB;YACP,4DAAY;YACZ,0DAAW;YACX,0DAAW;YACX,kEAAmB;YACnB,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;SAC9B;mIAGU,cAAc,mBAFV,mDAAQ,aANrB,4DAAY;QACZ,0DAAW;QACX,0DAAW;QACX,kEAAmB;6FAKV,cAAc;cAV1B,sDAAQ;eAAC;gBACR,OAAO,EAAE;oBACP,4DAAY;oBACZ,0DAAW;oBACX,0DAAW;oBACX,kEAAmB;oBACnB,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;iBAC9B;gBACD,YAAY,EAAE,CAAC,mDAAQ,CAAC;aACzB;;;;;;;;;;;;;;ACtBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAC+B;AACZ;AACC;AAC5B;AACuB;;;;;;;;ICQzD,0EACE;IAAA,0EAAuD;IAAC,uDAC1D;IAAA,4DAAM;;;IADoD,0DAC1D;IAD0D,kGAC1D;;;IAHF,wEACE;IAAA,qHACE;IAEJ,qEAAe;;;;IAHc,0DAA0J;IAA1J,gPAA0J;;;IAYrL,0EACE;IAAA,0EAAuD;IAAC,uDAC1D;IAAA,4DAAM;;;IADoD,0DAC1D;IAD0D,kGAC1D;;;IAHF,wEACE;IAAA,qHACE;IAEJ,qEAAe;;;;IAHc,0DAAiJ;IAAjJ,uOAAiJ;;;IAW5K,0EACE;IAAA,0EAAuD;IAAC,uDAC1D;IAAA,4DAAM;;;IADoD,0DAC1D;IAD0D,kGAC1D;;;IAHF,wEACE;IAAA,qHACE;IAEJ,qEAAe;;;;IAHc,0DAAiJ;IAAjJ,uOAAiJ;;AD9BpL,IAAI,KAAS,CAAC;AAMP,MAAM,QAAQ;IAOnB,YACS,WAAwB,EACvB,MAAc,EACd,aAA4B;QAF7B,gBAAW,GAAX,WAAW,CAAa;QACvB,WAAM,GAAN,MAAM,CAAQ;QACd,kBAAa,GAAb,aAAa,CAAe;QAUrC,UAAK,GAAG;YACN,EAAE,EAAE,0BAA0B;YAC9B,EAAE,EAAE,0BAA0B;YAC9B,WAAW,EAAE;gBACX,qBAAqB;gBACrB,gBAAgB;gBAChB,4CAA4C;gBAC5C,mBAAmB;aACpB;YACD,OAAO,EAAE,OAAO;YAChB,IAAI,EAAE,0CAA0C;YAChD,MAAM,EAAE,IAAI;SACb;QA4CF,wBAAmB,GAAG;YACpB,UAAU,EAAE;gBACV,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,uBAAuB,EAAE;gBACtD,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,8CAA8C,EAAE;gBAC9E,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,kDAAkD,EAAE;gBAClF,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,sDAAsD,EAAE;gBACpF,EAAE,IAAI,EAAE,eAAe,EAAE,OAAO,EAAE,uCAAuC,EAAE;aAC5E;YACD,MAAM,EAAE;gBACN,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,mBAAmB,EAAE;aACnD;YACD,UAAU,EAAE;gBACV,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,wBAAwB,EAAE;aACxD;YACD,OAAO,EAAE;gBACP,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,oBAAoB,EAAE;gBACnD,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,6BAA6B,EAAE;aAC5D;YACD,OAAO,EAAE;gBACP,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,oBAAoB,EAAE;gBACnD,EAAE,IAAI,EAAE,mBAAmB,EAAE,OAAO,EAAE,kDAAkD,EAAE;aAC3F;YACD,UAAU,EAAE;gBACV,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,uBAAuB,EAAE;gBACtD,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,8CAA8C,EAAE;gBAC9E,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,mFAAmF,EAAE;aAClH;YACD,kBAAkB,EAAE;gBAClB,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,+BAA+B,EAAE;aAC/D;YACD,oBAAoB,EAAE;gBACpB,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,oBAAoB,EAAE;aACpD;YACD,OAAO,EAAE;gBACP,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,uCAAuC,EAAE;aACtE;SACF,CAAC;IArGE,CAAC;IACP,IAAI;QACF,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,CAAC,SAAkB,EAAE,EAAE;YAC3D,IAAG,SAAS,EAAE;gBACZ,yBAAyB;aAC1B;QACF,CAAC,CAAC,CAAC;IAEJ,CAAC;IAcD,QAAQ;QACN,qHAAqH;QACrH,sEAAsE;QAGtE,IAAI,CAAC,OAAO,GAAG;YACb,MAAM;YACN,QAAQ;SACT,CAAC;QAEF,IAAI,CAAC,wBAAwB,GAAG,IAAI,wDAAS,CAAC;YAC5C,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC;gBAC/C,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvB,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,OAAO,CAAC,iDAAiD,CAAC;aACtE,CAAC,CAAC;YACH,gBAAgB,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SAC3D,EAAE,CAAC,SAAoB,EAAE,EAAE;YAC1B,OAAO,gFAAiB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAGH,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAC7C,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC;gBAC/C,gFAAiB,CAAC,aAAa;gBAC/B,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC;gBACxB,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvB,yDAAU,CAAC,OAAO,CAAC,yCAAyC,CAAC;gBAC7D,yDAAU,CAAC,QAAQ;aACpB,CAAC,CAAC;YACH,IAAI,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAC9C,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAClD,KAAK,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC;gBAC5C,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,OAAO,CAAC,iDAAiD,CAAC;aACtE,CAAC,CAAC;YACH,MAAM,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAC7D,aAAa,EAAE,IAAI,CAAC,mBAAmB;YACvC,kBAAkB,EAAE,IAAI,CAAC,wBAAwB;YACjD,KAAK,EAAE,IAAI,0DAAW,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SACzD,CAAC,CAAC;IACL,CAAC;IAwCD,QAAQ;QACN,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;IACpC,CAAC;;gEArHU,QAAQ;wFAAR,QAAQ;QCbrB,6EACE;QAAA,iFACE;QAAA,4EAAW;QAAA,+EAAoB;QAAA,4DAAY;QAC7C,4DAAc;QAChB,4DAAa;QAEb,iFACE;QAAA,0EACE;QADoC,0IAAY,cAAU,IAAC;QAC3D,2EACE;QAAA,+EAA+C;QAAA,4EAAiB;QAAA,4DAAY;QAC5E,0EAA8D;QAChE,4DAAW;QACX,0EACE;QAAA,wHACE;QAIJ,4DAAM;QAEN,4EACE;QAAA,gFAA+C;QAAA,iEAAK;QAAA,4DAAY;QAChE,2EAA2D;QAC7D,4DAAW;QACX,0EACE;QAAA,wHACE;QAIJ,4DAAM;QACN,4EACE;QAAA,gFAA2B;QAAA,qGAAoC;QAAA,4DAAY;QAC3E,8EAAqE;QACvE,4DAAW;QACX,0EACE;QAAA,wHACE;QAIJ,4DAAM;QAEN,iFAAgH;QAAA,yEAAa;QAAA,4DAAa;QAC5I,4DAAO;QACT,4DAAc;;QAtCN,0DAA8B;QAA9B,2FAA8B;QAMlB,0DAAuD;QAAvD,qGAAuD;QAYvD,0DAAoD;QAApD,kGAAoD;QAWpD,0DAAoD;QAApD,kGAAoD;QAOO,0DAAoC;QAApC,iGAAoC;;6FD9BtG,QAAQ;cALpB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,kBAAkB;gBAC/B,SAAS,EAAE,CAAC,kBAAkB,CAAC;aAChC;;;;;;;;;;;;;;AEVD;AAAA;AAAO,MAAM,iBAAiB;IAE5B,mEAAmE;IACnE,MAAM,CAAC,QAAQ,CAAC,SAAoB;QAClC,IAAI,GAAG,CAAC;QACR,IAAI,KAAK,GAAG,IAAI,CAAC;QAEjB,KAAK,IAAI,GAAG,IAAI,SAAS,CAAC,QAAQ,EAAE;YAClC,IAAI,SAAS,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;gBAC1C,IAAI,OAAO,GAA6B,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAEhE,IAAI,GAAG,KAAK,SAAS,EAAE;oBACrB,GAAG,GAAG,OAAO,CAAC,KAAK;iBACpB;qBAAM;oBACL,IAAI,GAAG,KAAK,OAAO,CAAC,KAAK,EAAE;wBACzB,KAAK,GAAG,KAAK,CAAC;wBACd,MAAM;qBACP;iBACF;aACF;SACF;QAED,IAAI,KAAK,EAAE;YACT,OAAO,IAAI,CAAC;SACb;QAED,OAAO;YACL,QAAQ,EAAE,IAAI;SACf,CAAC;IACJ,CAAC;CACF;;;;;;;;;;;;;AC9BD;AAAA;AAAO,MAAM,iBAAiB;IAE5B,MAAM,CAAC,aAAa,CAAC,EAAe;QAElC,IAAG,EAAE,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,QAAQ,IAAI,EAAE,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,QAAQ,EAAC;YAC5E,OAAO;gBACL,aAAa,EAAE,IAAI;aACpB,CAAC;SACH;aAAM;YACL,OAAO,IAAI,CAAC;SACb;IACH,CAAC;CACF","file":"form-form-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\nimport { IonicModule } from '@ionic/angular';\nimport { FormPage } from './form.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: FormPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [FormPage]\n})\nexport class FormPageModule {}","  \nimport { Component, OnInit } from '@angular/core';\nimport { Validators, FormBuilder, FormGroup, FormControl } from '@angular/forms';\nimport { UsernameValidator } from '../validators/username.validator';\n import { PasswordValidator } from '../validators/password.validator';\n import { Router } from '@angular/router';\nimport { EmailComposer } from '@ionic-native/email-composer/ngx';\nlet email:any;\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.page.html',\n  styleUrls: ['./form.page.scss'],\n})\nexport class FormPage implements OnInit {\n  validations_form: FormGroup;\n  matching_passwords_group: FormGroup;\n  country_phone_group: FormGroup;\n \n  genders: Array<string>;\n\n  constructor(\n    public formBuilder: FormBuilder,\n    private router: Router,\n    private emailComposer: EmailComposer\n  ) { }\nsend(){\n  this.emailComposer.isAvailable().then((available: boolean) =>{\n    if(available) {\n      //Now we know we can send\n    }\n   });\n   \n  }\n   email = {\n     to: 'depetrinicolas@gmail.com',\n     cc: 'depetrinicolas@gmail.com', \n     attachments: [\n       'file://img/logo.png',\n       'res://icon.png',\n       'base64:icon.png//iVBORw0KGgoAAAANSUhEUg...',\n       'file://README.pdf'\n     ],\n     subject: 'Ieeee',\n     body: 'How are you? Nice greetings from Leipzig',\n     isHtml: true\n   }\n  ngOnInit() {\n    //  We just use a few random countries, however, you can use the countries you need by just adding them to this list.\n    // also you can use a library to get all the countries from the world.\n   \n\n    this.genders = [\n      \"Male\",\n      \"Female\"\n    ];\n\n    this.matching_passwords_group = new FormGroup({\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(5),\n        Validators.required,\n        Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')\n      ])),\n      confirm_password: new FormControl('', Validators.required)\n    }, (formGroup: FormGroup) => {\n      return PasswordValidator.areEqual(formGroup);\n    });\n\n\n    this.validations_form = this.formBuilder.group({\n      username: new FormControl('', Validators.compose([\n        UsernameValidator.validUsername,\n        Validators.maxLength(25),\n        Validators.minLength(5),\n        Validators.pattern('^(?=.*[a-zA-Z])(?=.*[0-9])[a-zA-Z0-9]+$'),\n        Validators.required\n      ])),\n      name: new FormControl('', Validators.required),\n      lastname: new FormControl('', Validators.required),\n      email: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n      gender: new FormControl(this.genders[0], Validators.required),\n      country_phone: this.country_phone_group,\n      matching_passwords: this.matching_passwords_group,\n      terms: new FormControl(true, Validators.pattern('true'))\n    });\n  }\n\n  validation_messages = {\n    'username': [\n      { type: 'required', message: 'Username is required.' },\n      { type: 'minlength', message: 'Username must be at least 5 characters long.' },\n      { type: 'maxlength', message: 'Username cannot be more than 25 characters long.' },\n      { type: 'pattern', message: 'Your username must contain only numbers and letters.' },\n      { type: 'validUsername', message: 'Your username has already been taken.' }\n    ],\n    'name': [\n      { type: 'required', message: 'Name is required.' }\n    ],\n    'lastname': [\n      { type: 'required', message: 'Last name is required.' }\n    ],\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Please wnter a valid email.' }\n    ],\n    'phone': [\n      { type: 'required', message: 'Phone is required.' },\n      { type: 'validCountryPhone', message: 'The phone is incorrect for the selected country.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 5 characters long.' },\n      { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, and one number.' }\n    ],\n    'confirm_password': [\n      { type: 'required', message: 'Confirm password is required.' }\n    ],\n    'matching_passwords': [\n      { type: 'areEqual', message: 'Password mismatch.' }\n    ],\n    'terms': [\n      { type: 'pattern', message: 'You must accept terms and conditions.' }\n    ],\n  };\n\n  onSubmit(){\n    this.send();\n    this.router.navigate([\"/agenda\"]);\n  }\n\n}","<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-title>Rock Me Beer Pedidos</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content padding class=\"form-content\">\n  <form [formGroup]=\"validations_form\"  (ngSubmit)=\"onSubmit()\">\n    <ion-item>\n      <ion-label position=\"floating\" color=\"primary\">Nombre y Apellido</ion-label>\n      <ion-input type=\"text\" formControlName=\"username\"></ion-input>\n    </ion-item>\n    <div class=\"validation-errors\">\n      <ng-container *ngFor=\"let validation of validation_messages.username\">\n        <div class=\"error-message\" *ngIf=\"validations_form.get('username').hasError(validation.type) && (validations_form.get('username').dirty || validations_form.get('username').touched)\">\n          <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\n        </div>\n      </ng-container>\n    </div>\n  \n    <ion-item>\n      <ion-label position=\"floating\" color=\"primary\">Email</ion-label>\n      <ion-input type=\"text\" formControlName=\"email\"></ion-input>\n    </ion-item>\n    <div class=\"validation-errors\">\n      <ng-container *ngFor=\"let validation of validation_messages.email\">\n        <div class=\"error-message\" *ngIf=\"validations_form.get('email').hasError(validation.type) && (validations_form.get('email').dirty || validations_form.get('email').touched)\">\n          <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\n        </div>\n      </ng-container>\n    </div>  \n    <ion-item>\n      <ion-label color=\"primary\">I Acepto las condiciones y tèrminos </ion-label>\n      <ion-checkbox color=\"primary\" formControlName=\"terms\"></ion-checkbox>\n    </ion-item>\n    <div class=\"validation-errors\">\n      <ng-container *ngFor=\"let validation of validation_messages.terms\">\n        <div class=\"error-message\" *ngIf=\"validations_form.get('terms').hasError(validation.type) && (validations_form.get('terms').dirty || validations_form.get('terms').touched)\">\n          <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\n        </div>\n      </ng-container>\n    </div>\n\n    <ion-button color=\"success\" class=\"submit-btn\" expand=\"full\" type=\"submit\" [disabled]=\"!validations_form.valid\">Enviar Pedido</ion-button>\n  </form>\n</ion-content>","import { FormControl, FormGroup } from '@angular/forms';\r\n\r\nexport class PasswordValidator {\r\n\r\n  // Inspired on: http://plnkr.co/edit/Zcbg2T3tOxYmhxs7vaAm?p=preview\r\n  static areEqual(formGroup: FormGroup) {\r\n    let val;\r\n    let valid = true;\r\n\r\n    for (let key in formGroup.controls) {\r\n      if (formGroup.controls.hasOwnProperty(key)) {\r\n        let control: FormControl = <FormControl>formGroup.controls[key];\r\n\r\n        if (val === undefined) {\r\n          val = control.value\r\n        } else {\r\n          if (val !== control.value) {\r\n            valid = false;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (valid) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      areEqual: true\r\n    };\r\n  }\r\n}","import { FormControl } from '@angular/forms';\r\n\r\nexport class UsernameValidator {\r\n\r\n  static validUsername(fc: FormControl){\r\n\r\n    if(fc.value.toLowerCase() === \"abc123\" || fc.value.toLowerCase() === \"123abc\"){\r\n      return {\r\n        validUsername: true\r\n      };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n} "],"sourceRoot":"webpack:///"}